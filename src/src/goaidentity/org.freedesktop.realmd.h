/*
 * Generated by gdbus-codegen 2.50.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_FREEDESKTOP_REALMD_H__
#define __ORG_FREEDESKTOP_REALMD_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Provider */

#define GOA_REALM_TYPE_PROVIDER (goa_realm_provider_get_type ())
#define GOA_REALM_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_PROVIDER, GoaRealmProvider))
#define GOA_REALM_IS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_PROVIDER))
#define GOA_REALM_PROVIDER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_REALM_TYPE_PROVIDER, GoaRealmProviderIface))

struct _GoaRealmProvider;
typedef struct _GoaRealmProvider GoaRealmProvider;
typedef struct _GoaRealmProviderIface GoaRealmProviderIface;

struct _GoaRealmProviderIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_discover) (
    GoaRealmProvider *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_string,
    GVariant *arg_options);

  const gchar * (*get_name) (GoaRealmProvider *object);

  const gchar *const * (*get_realms) (GoaRealmProvider *object);

  const gchar * (*get_version) (GoaRealmProvider *object);

};

GType goa_realm_provider_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_realm_provider_interface_info (void);
guint goa_realm_provider_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_realm_provider_complete_discover (
    GoaRealmProvider *object,
    GDBusMethodInvocation *invocation,
    gint relevance,
    const gchar *const *realm);



/* D-Bus method calls: */
void goa_realm_provider_call_discover (
    GoaRealmProvider *proxy,
    const gchar *arg_string,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_provider_call_discover_finish (
    GoaRealmProvider *proxy,
    gint *out_relevance,
    gchar ***out_realm,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_provider_call_discover_sync (
    GoaRealmProvider *proxy,
    const gchar *arg_string,
    GVariant *arg_options,
    gint *out_relevance,
    gchar ***out_realm,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *goa_realm_provider_get_name (GoaRealmProvider *object);
gchar *goa_realm_provider_dup_name (GoaRealmProvider *object);
void goa_realm_provider_set_name (GoaRealmProvider *object, const gchar *value);

const gchar *goa_realm_provider_get_version (GoaRealmProvider *object);
gchar *goa_realm_provider_dup_version (GoaRealmProvider *object);
void goa_realm_provider_set_version (GoaRealmProvider *object, const gchar *value);

const gchar *const *goa_realm_provider_get_realms (GoaRealmProvider *object);
gchar **goa_realm_provider_dup_realms (GoaRealmProvider *object);
void goa_realm_provider_set_realms (GoaRealmProvider *object, const gchar *const *value);


/* ---- */

#define GOA_REALM_TYPE_PROVIDER_PROXY (goa_realm_provider_proxy_get_type ())
#define GOA_REALM_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_PROVIDER_PROXY, GoaRealmProviderProxy))
#define GOA_REALM_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_PROVIDER_PROXY, GoaRealmProviderProxyClass))
#define GOA_REALM_PROVIDER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_PROVIDER_PROXY, GoaRealmProviderProxyClass))
#define GOA_REALM_IS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_PROVIDER_PROXY))
#define GOA_REALM_IS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_PROVIDER_PROXY))

typedef struct _GoaRealmProviderProxy GoaRealmProviderProxy;
typedef struct _GoaRealmProviderProxyClass GoaRealmProviderProxyClass;
typedef struct _GoaRealmProviderProxyPrivate GoaRealmProviderProxyPrivate;

struct _GoaRealmProviderProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaRealmProviderProxyPrivate *priv;
};

struct _GoaRealmProviderProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_realm_provider_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmProviderProxy, g_object_unref)
#endif

void goa_realm_provider_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmProvider *goa_realm_provider_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmProvider *goa_realm_provider_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_realm_provider_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmProvider *goa_realm_provider_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmProvider *goa_realm_provider_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_REALM_TYPE_PROVIDER_SKELETON (goa_realm_provider_skeleton_get_type ())
#define GOA_REALM_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_PROVIDER_SKELETON, GoaRealmProviderSkeleton))
#define GOA_REALM_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_PROVIDER_SKELETON, GoaRealmProviderSkeletonClass))
#define GOA_REALM_PROVIDER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_PROVIDER_SKELETON, GoaRealmProviderSkeletonClass))
#define GOA_REALM_IS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_PROVIDER_SKELETON))
#define GOA_REALM_IS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_PROVIDER_SKELETON))

typedef struct _GoaRealmProviderSkeleton GoaRealmProviderSkeleton;
typedef struct _GoaRealmProviderSkeletonClass GoaRealmProviderSkeletonClass;
typedef struct _GoaRealmProviderSkeletonPrivate GoaRealmProviderSkeletonPrivate;

struct _GoaRealmProviderSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaRealmProviderSkeletonPrivate *priv;
};

struct _GoaRealmProviderSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_realm_provider_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmProviderSkeleton, g_object_unref)
#endif

GoaRealmProvider *goa_realm_provider_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Service */

#define GOA_REALM_TYPE_SERVICE (goa_realm_service_get_type ())
#define GOA_REALM_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_SERVICE, GoaRealmService))
#define GOA_REALM_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_SERVICE))
#define GOA_REALM_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_REALM_TYPE_SERVICE, GoaRealmServiceIface))

struct _GoaRealmService;
typedef struct _GoaRealmService GoaRealmService;
typedef struct _GoaRealmServiceIface GoaRealmServiceIface;

struct _GoaRealmServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel) (
    GoaRealmService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_operation);

  gboolean (*handle_release) (
    GoaRealmService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_locale) (
    GoaRealmService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_locale);

  void (*diagnostics) (
    GoaRealmService *object,
    const gchar *arg_data,
    const gchar *arg_operation);

};

GType goa_realm_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_realm_service_interface_info (void);
guint goa_realm_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_realm_service_complete_cancel (
    GoaRealmService *object,
    GDBusMethodInvocation *invocation);

void goa_realm_service_complete_set_locale (
    GoaRealmService *object,
    GDBusMethodInvocation *invocation);

void goa_realm_service_complete_release (
    GoaRealmService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void goa_realm_service_emit_diagnostics (
    GoaRealmService *object,
    const gchar *arg_data,
    const gchar *arg_operation);



/* D-Bus method calls: */
void goa_realm_service_call_cancel (
    GoaRealmService *proxy,
    const gchar *arg_operation,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_service_call_cancel_finish (
    GoaRealmService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_service_call_cancel_sync (
    GoaRealmService *proxy,
    const gchar *arg_operation,
    GCancellable *cancellable,
    GError **error);

void goa_realm_service_call_set_locale (
    GoaRealmService *proxy,
    const gchar *arg_locale,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_service_call_set_locale_finish (
    GoaRealmService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_service_call_set_locale_sync (
    GoaRealmService *proxy,
    const gchar *arg_locale,
    GCancellable *cancellable,
    GError **error);

void goa_realm_service_call_release (
    GoaRealmService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_service_call_release_finish (
    GoaRealmService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_service_call_release_sync (
    GoaRealmService *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GOA_REALM_TYPE_SERVICE_PROXY (goa_realm_service_proxy_get_type ())
#define GOA_REALM_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_SERVICE_PROXY, GoaRealmServiceProxy))
#define GOA_REALM_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_SERVICE_PROXY, GoaRealmServiceProxyClass))
#define GOA_REALM_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_SERVICE_PROXY, GoaRealmServiceProxyClass))
#define GOA_REALM_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_SERVICE_PROXY))
#define GOA_REALM_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_SERVICE_PROXY))

typedef struct _GoaRealmServiceProxy GoaRealmServiceProxy;
typedef struct _GoaRealmServiceProxyClass GoaRealmServiceProxyClass;
typedef struct _GoaRealmServiceProxyPrivate GoaRealmServiceProxyPrivate;

struct _GoaRealmServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaRealmServiceProxyPrivate *priv;
};

struct _GoaRealmServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_realm_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmServiceProxy, g_object_unref)
#endif

void goa_realm_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmService *goa_realm_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmService *goa_realm_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_realm_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmService *goa_realm_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmService *goa_realm_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_REALM_TYPE_SERVICE_SKELETON (goa_realm_service_skeleton_get_type ())
#define GOA_REALM_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_SERVICE_SKELETON, GoaRealmServiceSkeleton))
#define GOA_REALM_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_SERVICE_SKELETON, GoaRealmServiceSkeletonClass))
#define GOA_REALM_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_SERVICE_SKELETON, GoaRealmServiceSkeletonClass))
#define GOA_REALM_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_SERVICE_SKELETON))
#define GOA_REALM_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_SERVICE_SKELETON))

typedef struct _GoaRealmServiceSkeleton GoaRealmServiceSkeleton;
typedef struct _GoaRealmServiceSkeletonClass GoaRealmServiceSkeletonClass;
typedef struct _GoaRealmServiceSkeletonPrivate GoaRealmServiceSkeletonPrivate;

struct _GoaRealmServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaRealmServiceSkeletonPrivate *priv;
};

struct _GoaRealmServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_realm_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmServiceSkeleton, g_object_unref)
#endif

GoaRealmService *goa_realm_service_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Realm */

#define GOA_REALM_TYPE_COMMON (goa_realm_common_get_type ())
#define GOA_REALM_COMMON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_COMMON, GoaRealmCommon))
#define GOA_REALM_IS_COMMON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_COMMON))
#define GOA_REALM_COMMON_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_REALM_TYPE_COMMON, GoaRealmCommonIface))

struct _GoaRealmCommon;
typedef struct _GoaRealmCommon GoaRealmCommon;
typedef struct _GoaRealmCommonIface GoaRealmCommonIface;

struct _GoaRealmCommonIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_change_login_policy) (
    GoaRealmCommon *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options);

  gboolean (*handle_deconfigure) (
    GoaRealmCommon *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  const gchar * (*get_configured) (GoaRealmCommon *object);

  GVariant * (*get_details) (GoaRealmCommon *object);

  const gchar *const * (*get_login_formats) (GoaRealmCommon *object);

  const gchar * (*get_login_policy) (GoaRealmCommon *object);

  const gchar * (*get_name) (GoaRealmCommon *object);

  const gchar *const * (*get_permitted_logins) (GoaRealmCommon *object);

  const gchar *const * (*get_supported_interfaces) (GoaRealmCommon *object);

};

GType goa_realm_common_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_realm_common_interface_info (void);
guint goa_realm_common_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_realm_common_complete_deconfigure (
    GoaRealmCommon *object,
    GDBusMethodInvocation *invocation);

void goa_realm_common_complete_change_login_policy (
    GoaRealmCommon *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void goa_realm_common_call_deconfigure (
    GoaRealmCommon *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_common_call_deconfigure_finish (
    GoaRealmCommon *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_common_call_deconfigure_sync (
    GoaRealmCommon *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void goa_realm_common_call_change_login_policy (
    GoaRealmCommon *proxy,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_common_call_change_login_policy_finish (
    GoaRealmCommon *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_common_call_change_login_policy_sync (
    GoaRealmCommon *proxy,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *goa_realm_common_get_name (GoaRealmCommon *object);
gchar *goa_realm_common_dup_name (GoaRealmCommon *object);
void goa_realm_common_set_name (GoaRealmCommon *object, const gchar *value);

const gchar *goa_realm_common_get_configured (GoaRealmCommon *object);
gchar *goa_realm_common_dup_configured (GoaRealmCommon *object);
void goa_realm_common_set_configured (GoaRealmCommon *object, const gchar *value);

const gchar *const *goa_realm_common_get_supported_interfaces (GoaRealmCommon *object);
gchar **goa_realm_common_dup_supported_interfaces (GoaRealmCommon *object);
void goa_realm_common_set_supported_interfaces (GoaRealmCommon *object, const gchar *const *value);

GVariant *goa_realm_common_get_details (GoaRealmCommon *object);
GVariant *goa_realm_common_dup_details (GoaRealmCommon *object);
void goa_realm_common_set_details (GoaRealmCommon *object, GVariant *value);

const gchar *const *goa_realm_common_get_login_formats (GoaRealmCommon *object);
gchar **goa_realm_common_dup_login_formats (GoaRealmCommon *object);
void goa_realm_common_set_login_formats (GoaRealmCommon *object, const gchar *const *value);

const gchar *goa_realm_common_get_login_policy (GoaRealmCommon *object);
gchar *goa_realm_common_dup_login_policy (GoaRealmCommon *object);
void goa_realm_common_set_login_policy (GoaRealmCommon *object, const gchar *value);

const gchar *const *goa_realm_common_get_permitted_logins (GoaRealmCommon *object);
gchar **goa_realm_common_dup_permitted_logins (GoaRealmCommon *object);
void goa_realm_common_set_permitted_logins (GoaRealmCommon *object, const gchar *const *value);


/* ---- */

#define GOA_REALM_TYPE_COMMON_PROXY (goa_realm_common_proxy_get_type ())
#define GOA_REALM_COMMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_COMMON_PROXY, GoaRealmCommonProxy))
#define GOA_REALM_COMMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_COMMON_PROXY, GoaRealmCommonProxyClass))
#define GOA_REALM_COMMON_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_COMMON_PROXY, GoaRealmCommonProxyClass))
#define GOA_REALM_IS_COMMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_COMMON_PROXY))
#define GOA_REALM_IS_COMMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_COMMON_PROXY))

typedef struct _GoaRealmCommonProxy GoaRealmCommonProxy;
typedef struct _GoaRealmCommonProxyClass GoaRealmCommonProxyClass;
typedef struct _GoaRealmCommonProxyPrivate GoaRealmCommonProxyPrivate;

struct _GoaRealmCommonProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaRealmCommonProxyPrivate *priv;
};

struct _GoaRealmCommonProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_realm_common_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmCommonProxy, g_object_unref)
#endif

void goa_realm_common_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmCommon *goa_realm_common_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmCommon *goa_realm_common_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_realm_common_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmCommon *goa_realm_common_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmCommon *goa_realm_common_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_REALM_TYPE_COMMON_SKELETON (goa_realm_common_skeleton_get_type ())
#define GOA_REALM_COMMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_COMMON_SKELETON, GoaRealmCommonSkeleton))
#define GOA_REALM_COMMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_COMMON_SKELETON, GoaRealmCommonSkeletonClass))
#define GOA_REALM_COMMON_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_COMMON_SKELETON, GoaRealmCommonSkeletonClass))
#define GOA_REALM_IS_COMMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_COMMON_SKELETON))
#define GOA_REALM_IS_COMMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_COMMON_SKELETON))

typedef struct _GoaRealmCommonSkeleton GoaRealmCommonSkeleton;
typedef struct _GoaRealmCommonSkeletonClass GoaRealmCommonSkeletonClass;
typedef struct _GoaRealmCommonSkeletonPrivate GoaRealmCommonSkeletonPrivate;

struct _GoaRealmCommonSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaRealmCommonSkeletonPrivate *priv;
};

struct _GoaRealmCommonSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_realm_common_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmCommonSkeleton, g_object_unref)
#endif

GoaRealmCommon *goa_realm_common_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Kerberos */

#define GOA_REALM_TYPE_KERBEROS (goa_realm_kerberos_get_type ())
#define GOA_REALM_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_KERBEROS, GoaRealmKerberos))
#define GOA_REALM_IS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_KERBEROS))
#define GOA_REALM_KERBEROS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_REALM_TYPE_KERBEROS, GoaRealmKerberosIface))

struct _GoaRealmKerberos;
typedef struct _GoaRealmKerberos GoaRealmKerberos;
typedef struct _GoaRealmKerberosIface GoaRealmKerberosIface;

struct _GoaRealmKerberosIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_domain_name) (GoaRealmKerberos *object);

  const gchar * (*get_realm_name) (GoaRealmKerberos *object);

};

GType goa_realm_kerberos_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_realm_kerberos_interface_info (void);
guint goa_realm_kerberos_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *goa_realm_kerberos_get_realm_name (GoaRealmKerberos *object);
gchar *goa_realm_kerberos_dup_realm_name (GoaRealmKerberos *object);
void goa_realm_kerberos_set_realm_name (GoaRealmKerberos *object, const gchar *value);

const gchar *goa_realm_kerberos_get_domain_name (GoaRealmKerberos *object);
gchar *goa_realm_kerberos_dup_domain_name (GoaRealmKerberos *object);
void goa_realm_kerberos_set_domain_name (GoaRealmKerberos *object, const gchar *value);


/* ---- */

#define GOA_REALM_TYPE_KERBEROS_PROXY (goa_realm_kerberos_proxy_get_type ())
#define GOA_REALM_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_KERBEROS_PROXY, GoaRealmKerberosProxy))
#define GOA_REALM_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_KERBEROS_PROXY, GoaRealmKerberosProxyClass))
#define GOA_REALM_KERBEROS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_KERBEROS_PROXY, GoaRealmKerberosProxyClass))
#define GOA_REALM_IS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_KERBEROS_PROXY))
#define GOA_REALM_IS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_KERBEROS_PROXY))

typedef struct _GoaRealmKerberosProxy GoaRealmKerberosProxy;
typedef struct _GoaRealmKerberosProxyClass GoaRealmKerberosProxyClass;
typedef struct _GoaRealmKerberosProxyPrivate GoaRealmKerberosProxyPrivate;

struct _GoaRealmKerberosProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaRealmKerberosProxyPrivate *priv;
};

struct _GoaRealmKerberosProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_realm_kerberos_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmKerberosProxy, g_object_unref)
#endif

void goa_realm_kerberos_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmKerberos *goa_realm_kerberos_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmKerberos *goa_realm_kerberos_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_realm_kerberos_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmKerberos *goa_realm_kerberos_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmKerberos *goa_realm_kerberos_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_REALM_TYPE_KERBEROS_SKELETON (goa_realm_kerberos_skeleton_get_type ())
#define GOA_REALM_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_KERBEROS_SKELETON, GoaRealmKerberosSkeleton))
#define GOA_REALM_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_KERBEROS_SKELETON, GoaRealmKerberosSkeletonClass))
#define GOA_REALM_KERBEROS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_KERBEROS_SKELETON, GoaRealmKerberosSkeletonClass))
#define GOA_REALM_IS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_KERBEROS_SKELETON))
#define GOA_REALM_IS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_KERBEROS_SKELETON))

typedef struct _GoaRealmKerberosSkeleton GoaRealmKerberosSkeleton;
typedef struct _GoaRealmKerberosSkeletonClass GoaRealmKerberosSkeletonClass;
typedef struct _GoaRealmKerberosSkeletonPrivate GoaRealmKerberosSkeletonPrivate;

struct _GoaRealmKerberosSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaRealmKerberosSkeletonPrivate *priv;
};

struct _GoaRealmKerberosSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_realm_kerberos_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmKerberosSkeleton, g_object_unref)
#endif

GoaRealmKerberos *goa_realm_kerberos_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.KerberosMembership */

#define GOA_REALM_TYPE_KERBEROS_MEMBERSHIP (goa_realm_kerberos_membership_get_type ())
#define GOA_REALM_KERBEROS_MEMBERSHIP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP, GoaRealmKerberosMembership))
#define GOA_REALM_IS_KERBEROS_MEMBERSHIP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP))
#define GOA_REALM_KERBEROS_MEMBERSHIP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP, GoaRealmKerberosMembershipIface))

struct _GoaRealmKerberosMembership;
typedef struct _GoaRealmKerberosMembership GoaRealmKerberosMembership;
typedef struct _GoaRealmKerberosMembershipIface GoaRealmKerberosMembershipIface;

struct _GoaRealmKerberosMembershipIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_join) (
    GoaRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_credentials,
    GVariant *arg_options);

  gboolean (*handle_leave) (
    GoaRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_credentials,
    GVariant *arg_options);

  const gchar * (*get_suggested_administrator) (GoaRealmKerberosMembership *object);

  GVariant * (*get_supported_join_credentials) (GoaRealmKerberosMembership *object);

  GVariant * (*get_supported_leave_credentials) (GoaRealmKerberosMembership *object);

};

GType goa_realm_kerberos_membership_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_realm_kerberos_membership_interface_info (void);
guint goa_realm_kerberos_membership_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_realm_kerberos_membership_complete_join (
    GoaRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation);

void goa_realm_kerberos_membership_complete_leave (
    GoaRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void goa_realm_kerberos_membership_call_join (
    GoaRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_kerberos_membership_call_join_finish (
    GoaRealmKerberosMembership *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_kerberos_membership_call_join_sync (
    GoaRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void goa_realm_kerberos_membership_call_leave (
    GoaRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_realm_kerberos_membership_call_leave_finish (
    GoaRealmKerberosMembership *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_realm_kerberos_membership_call_leave_sync (
    GoaRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *goa_realm_kerberos_membership_get_suggested_administrator (GoaRealmKerberosMembership *object);
gchar *goa_realm_kerberos_membership_dup_suggested_administrator (GoaRealmKerberosMembership *object);
void goa_realm_kerberos_membership_set_suggested_administrator (GoaRealmKerberosMembership *object, const gchar *value);

GVariant *goa_realm_kerberos_membership_get_supported_join_credentials (GoaRealmKerberosMembership *object);
GVariant *goa_realm_kerberos_membership_dup_supported_join_credentials (GoaRealmKerberosMembership *object);
void goa_realm_kerberos_membership_set_supported_join_credentials (GoaRealmKerberosMembership *object, GVariant *value);

GVariant *goa_realm_kerberos_membership_get_supported_leave_credentials (GoaRealmKerberosMembership *object);
GVariant *goa_realm_kerberos_membership_dup_supported_leave_credentials (GoaRealmKerberosMembership *object);
void goa_realm_kerberos_membership_set_supported_leave_credentials (GoaRealmKerberosMembership *object, GVariant *value);


/* ---- */

#define GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY (goa_realm_kerberos_membership_proxy_get_type ())
#define GOA_REALM_KERBEROS_MEMBERSHIP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY, GoaRealmKerberosMembershipProxy))
#define GOA_REALM_KERBEROS_MEMBERSHIP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY, GoaRealmKerberosMembershipProxyClass))
#define GOA_REALM_KERBEROS_MEMBERSHIP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY, GoaRealmKerberosMembershipProxyClass))
#define GOA_REALM_IS_KERBEROS_MEMBERSHIP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY))
#define GOA_REALM_IS_KERBEROS_MEMBERSHIP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY))

typedef struct _GoaRealmKerberosMembershipProxy GoaRealmKerberosMembershipProxy;
typedef struct _GoaRealmKerberosMembershipProxyClass GoaRealmKerberosMembershipProxyClass;
typedef struct _GoaRealmKerberosMembershipProxyPrivate GoaRealmKerberosMembershipProxyPrivate;

struct _GoaRealmKerberosMembershipProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaRealmKerberosMembershipProxyPrivate *priv;
};

struct _GoaRealmKerberosMembershipProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_realm_kerberos_membership_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmKerberosMembershipProxy, g_object_unref)
#endif

void goa_realm_kerberos_membership_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmKerberosMembership *goa_realm_kerberos_membership_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmKerberosMembership *goa_realm_kerberos_membership_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_realm_kerberos_membership_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaRealmKerberosMembership *goa_realm_kerberos_membership_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaRealmKerberosMembership *goa_realm_kerberos_membership_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON (goa_realm_kerberos_membership_skeleton_get_type ())
#define GOA_REALM_KERBEROS_MEMBERSHIP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON, GoaRealmKerberosMembershipSkeleton))
#define GOA_REALM_KERBEROS_MEMBERSHIP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON, GoaRealmKerberosMembershipSkeletonClass))
#define GOA_REALM_KERBEROS_MEMBERSHIP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON, GoaRealmKerberosMembershipSkeletonClass))
#define GOA_REALM_IS_KERBEROS_MEMBERSHIP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON))
#define GOA_REALM_IS_KERBEROS_MEMBERSHIP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON))

typedef struct _GoaRealmKerberosMembershipSkeleton GoaRealmKerberosMembershipSkeleton;
typedef struct _GoaRealmKerberosMembershipSkeletonClass GoaRealmKerberosMembershipSkeletonClass;
typedef struct _GoaRealmKerberosMembershipSkeletonPrivate GoaRealmKerberosMembershipSkeletonPrivate;

struct _GoaRealmKerberosMembershipSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaRealmKerberosMembershipSkeletonPrivate *priv;
};

struct _GoaRealmKerberosMembershipSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_realm_kerberos_membership_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmKerberosMembershipSkeleton, g_object_unref)
#endif

GoaRealmKerberosMembership *goa_realm_kerberos_membership_skeleton_new (void);


/* ---- */

#define GOA_REALM_TYPE_OBJECT (goa_realm_object_get_type ())
#define GOA_REALM_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_OBJECT, GoaRealmObject))
#define GOA_REALM_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_OBJECT))
#define GOA_REALM_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_REALM_TYPE_OBJECT, GoaRealmObject))

struct _GoaRealmObject;
typedef struct _GoaRealmObject GoaRealmObject;
typedef struct _GoaRealmObjectIface GoaRealmObjectIface;

struct _GoaRealmObjectIface
{
  GTypeInterface parent_iface;
};

GType goa_realm_object_get_type (void) G_GNUC_CONST;

GoaRealmProvider *goa_realm_object_get_provider (GoaRealmObject *object);
GoaRealmService *goa_realm_object_get_service (GoaRealmObject *object);
GoaRealmCommon *goa_realm_object_get_common (GoaRealmObject *object);
GoaRealmKerberos *goa_realm_object_get_kerberos (GoaRealmObject *object);
GoaRealmKerberosMembership *goa_realm_object_get_kerberos_membership (GoaRealmObject *object);
GoaRealmProvider *goa_realm_object_peek_provider (GoaRealmObject *object);
GoaRealmService *goa_realm_object_peek_service (GoaRealmObject *object);
GoaRealmCommon *goa_realm_object_peek_common (GoaRealmObject *object);
GoaRealmKerberos *goa_realm_object_peek_kerberos (GoaRealmObject *object);
GoaRealmKerberosMembership *goa_realm_object_peek_kerberos_membership (GoaRealmObject *object);

#define GOA_REALM_TYPE_OBJECT_PROXY (goa_realm_object_proxy_get_type ())
#define GOA_REALM_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_OBJECT_PROXY, GoaRealmObjectProxy))
#define GOA_REALM_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_OBJECT_PROXY, GoaRealmObjectProxyClass))
#define GOA_REALM_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_OBJECT_PROXY, GoaRealmObjectProxyClass))
#define GOA_REALM_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_OBJECT_PROXY))
#define GOA_REALM_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_OBJECT_PROXY))

typedef struct _GoaRealmObjectProxy GoaRealmObjectProxy;
typedef struct _GoaRealmObjectProxyClass GoaRealmObjectProxyClass;
typedef struct _GoaRealmObjectProxyPrivate GoaRealmObjectProxyPrivate;

struct _GoaRealmObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  GoaRealmObjectProxyPrivate *priv;
};

struct _GoaRealmObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType goa_realm_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmObjectProxy, g_object_unref)
#endif

GoaRealmObjectProxy *goa_realm_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define GOA_REALM_TYPE_OBJECT_SKELETON (goa_realm_object_skeleton_get_type ())
#define GOA_REALM_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_OBJECT_SKELETON, GoaRealmObjectSkeleton))
#define GOA_REALM_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_OBJECT_SKELETON, GoaRealmObjectSkeletonClass))
#define GOA_REALM_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_OBJECT_SKELETON, GoaRealmObjectSkeletonClass))
#define GOA_REALM_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_OBJECT_SKELETON))
#define GOA_REALM_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_OBJECT_SKELETON))

typedef struct _GoaRealmObjectSkeleton GoaRealmObjectSkeleton;
typedef struct _GoaRealmObjectSkeletonClass GoaRealmObjectSkeletonClass;
typedef struct _GoaRealmObjectSkeletonPrivate GoaRealmObjectSkeletonPrivate;

struct _GoaRealmObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  GoaRealmObjectSkeletonPrivate *priv;
};

struct _GoaRealmObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType goa_realm_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmObjectSkeleton, g_object_unref)
#endif

GoaRealmObjectSkeleton *goa_realm_object_skeleton_new (const gchar *object_path);
void goa_realm_object_skeleton_set_provider (GoaRealmObjectSkeleton *object, GoaRealmProvider *interface_);
void goa_realm_object_skeleton_set_service (GoaRealmObjectSkeleton *object, GoaRealmService *interface_);
void goa_realm_object_skeleton_set_common (GoaRealmObjectSkeleton *object, GoaRealmCommon *interface_);
void goa_realm_object_skeleton_set_kerberos (GoaRealmObjectSkeleton *object, GoaRealmKerberos *interface_);
void goa_realm_object_skeleton_set_kerberos_membership (GoaRealmObjectSkeleton *object, GoaRealmKerberosMembership *interface_);

/* ---- */

#define GOA_REALM_TYPE_OBJECT_MANAGER_CLIENT (goa_realm_object_manager_client_get_type ())
#define GOA_REALM_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_REALM_TYPE_OBJECT_MANAGER_CLIENT, GoaRealmObjectManagerClient))
#define GOA_REALM_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_REALM_TYPE_OBJECT_MANAGER_CLIENT, GoaRealmObjectManagerClientClass))
#define GOA_REALM_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_REALM_TYPE_OBJECT_MANAGER_CLIENT, GoaRealmObjectManagerClientClass))
#define GOA_REALM_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_REALM_TYPE_OBJECT_MANAGER_CLIENT))
#define GOA_REALM_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_REALM_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _GoaRealmObjectManagerClient GoaRealmObjectManagerClient;
typedef struct _GoaRealmObjectManagerClientClass GoaRealmObjectManagerClientClass;
typedef struct _GoaRealmObjectManagerClientPrivate GoaRealmObjectManagerClientPrivate;

struct _GoaRealmObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  GoaRealmObjectManagerClientPrivate *priv;
};

struct _GoaRealmObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaRealmObjectManagerClient, g_object_unref)
#endif

GType goa_realm_object_manager_client_get_type (void) G_GNUC_CONST;

GType goa_realm_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void goa_realm_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *goa_realm_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *goa_realm_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void goa_realm_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *goa_realm_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *goa_realm_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_REALMD_H__ */
